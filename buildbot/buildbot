#!/usr/bin/perl -w

use strict;
use open IO => ":encoding(utf-8)";
use open ':std';
use Modern::Perl '2014';
use experimental 'smartmatch';

use FindBin qw($Bin);
use lib "$Bin/../lib";

use Data::Dumper;
use Getopt::Long::Descriptive;
use Carp qw/confess/;
use File::Slurp;
use File::Path qw/rmtree/;
use JSON;
use File::Temp qw/tempfile/;
use HTTP::DAV;
use POSIX;
use Sys::Hostname;
use Carp; 

use BBB::API;

sub artifact_dircreate {
	my ($opt, $job) = @_;

	my $dir=sprintf("%s/%s", $opt->artifactdir, $job->{id});

	rmtree($dir);
	mkdir($dir);

	return $dir;
}

sub dispatch {
	my ($opt, $job) = @_;

	my $result={};

	my $adir=artifact_dircreate($opt, $job);
	my $configfile=sprintf("%s/config.json", $adir);

	open(my $fh, ">" . $configfile);
	print $fh to_json($job->{variables});
	close($fh);

	my $logfilename=sprintf("%s/logfile", $adir);
	open(my $logfh, ">" . $logfilename);

	# FIXME Need a timeout
	# FIXME store return code
	
	$result->{start}=strftime("%Y-%m-%dT%H:%M:%S", localtime(time()));

	my $pid = open(my $kid, "-|");
	defined($pid) || confess "can't fork: $!";
	if ($pid) {
		while (<$kid>) {
			print $_;
			print $logfh $_;
		}
		close($kid);

		my ($rc, $sig, $core) = ($? >> 8, $? & 127, $? & 128);	

		$result->{stop}=strftime("%Y-%m-%dT%H:%M:%S", localtime(time()));
		$result->{status}=($rc == 0) ? "ok" : "failed";
	} else {
		open(STDERR, ">&STDOUT");
		exec($opt->buildscript, $job->{id}, $adir, $configfile) || die "can't exec program: $!";
	}

	close($logfh);
	system("gzip $logfilename");

	my $pushfiles=artifact_push($opt, $job, $adir);
	$result->{artifacts}=$pushfiles;

	rmtree($adir);

	return $result;
}

sub artifact_push {
	my ($opt, $job, $adir) = @_;

	my $url="https://nuc.dynamic.uucico.de/artifacts";
	my $dav = HTTP::DAV->new();
	
	$dav->open( -url => $url )
		|| confess("Couldn't open $url: " . $dav->message . "\n");

	my $dir=sprintf("%s/%s", $url, $job->{id});

	$dav->mkcol( -url => $dir ) || printf("Oops - directory already exists\n");

	if ($dav->put(-local => $adir . "/*", -url => $dir)) {
		print("successfully uploaded multiple files to $dir\n");

		my $cwd=getcwd();
		chdir($adir),
		my @files=glob("*");
		chdir($cwd);

		return \@files;
	}

	print("put failed: " . $dav->message . "\n");
	return undef;
}

my ($opt, $usage) = describe_options(
	$FindBin::Script . ' %o <some-arg>',
	[ 'verbose|v',		"Verbose", { default => 0 } ],
	[ 'debug|d',		"Debug" ],
	[ 'api=s',		"API Endpoint", { required => 1 } ],
	[ 'sysname=s',		"System name for api", { default => hostname } ],
	[ 'capability|c=s@',	"Capability to claim jobs" ],
	[ 'buildscript|b=s',	"Build script to call with job definition", { required => 1 } ],
	[ 'artifactdir|a=s',	"Directory to create per job artifact directories", { default => "/tmp" } ],
	[],
	[ 'help',		"print usage message and exit", { shortcircuit => 1 } ],
);

my $bbbapi=new BBB::API({
	baseuri => $opt->api,
	debug => $opt->debug
});

while(42) {
	printf("Trying to fetch job\n");
	my $js=$bbbapi->job_get($opt->capability, "build");
	if (!defined($js)) {
		sleep(10);
		next;
	}

	if (!$bbbapi->job_claim($opt->sysname, $js->{id})) {
		printf("Failed to claim job %s\n", $js->{id});
		next;
	}

	my $return=dispatch($opt, $js);
	print to_json($return, { pretty => 1 });

	$bbbapi->job_return($js->{id}, $return);
}
